export class WallBuildingTool extends window.go.Tool{constructor(i){super();this._buildingWall=null;this._isBuildingDivider=false;this.name="WallBuilding";this._startPoint=null;this._endPoint=null;this._wallReshapingTool=null;this._isBuildingDivider=false;if(i)Object.assign(this,i)}get startPoint(){return this._startPoint}set startPoint(i){this._startPoint=i}get endPoint(){return this._endPoint}set endPoint(i){this._endPoint=i}get wallReshapingTool(){return this._wallReshapingTool}set wallReshapingTool(i){this._wallReshapingTool=i}get buildingWall(){return this._buildingWall}set buildingWall(i){this._buildingWall=i}get isBuildingDivider(){return this._isBuildingDivider}set isBuildingDivider(i){this._isBuildingDivider=i}doActivate(){this.endPoint=null;this.startTransaction(this.name);this.diagram.isMouseCaptured=true;const a=this;const s=a.diagram;let n=a.diagram.lastInput.documentPoint;let o=false;const i=s.findNodesByExample({category:"WallGroup"});i.iterator.each(function(i){if(s.isPointInWall(i,n)){if(a.buildingWall===null){const t=n.projectOntoLineSegmentPoint(i.data.startpoint,i.data.endpoint);n=t;o=true}}});i.iterator.each(function(i){const t=i.data.startpoint;const a=i.data.endpoint;const s=Math.sqrt(t.distanceSquaredPoint(n));if(s<15){n=t;o=true}const e=Math.sqrt(a.distanceSquaredPoint(n));if(e<15){n=a;o=true}});if(true){let i=s.model.modelData.gridSize;if(!a.diagram.toolManager.draggingTool.isGridSnapEnabled||o)i=1e-4;const t=i*Math.round(n.x/i);const e=i*Math.round(n.y/i);n=new window.go.Point(t,e)}this.startPoint=n;this.wallReshapingTool=s.toolManager.mouseDownTools.elt(3);this.isActive=true}doMouseDown(){const i=this.diagram;const t=this;t.diagram.currentCursor="crosshair";const a={key:"wall",category:"WallGroup",caption:t.isBuildingDivider?"Divider":"Wall",type:t.isBuildingDivider?"Divider":"Wall",startpoint:t.startPoint,endpoint:t.startPoint,smpt1:t.startPoint,smpt2:t.startPoint,empt1:t.startPoint,empt2:t.startPoint,thickness:t._isBuildingDivider?.005:parseFloat(i.model.modelData.wallThickness),color:"lightgray",isGroup:true,notes:"",isDivider:t.isBuildingDivider};this.diagram.model.addNodeData(a);const s=i.findPartForKey(a.key);this.buildingWall=s;const e=i;e.updateWall(s);const n=i.findPartForData(a);if(n===null)return;t.transactionResult=t.name;i.raiseDiagramEvent("PartCreated",n);if(t.wallReshapingTool===null)return;t.wallReshapingTool.isEnabled=true;i.select(n);t.wallReshapingTool.isBuilding=true;t.wallReshapingTool.adornedShape=n.findObject("SHAPE");t.wallReshapingTool.doActivate()}doKeyDown(){const t=this.diagram;const i=t.lastInput;if(i.key==="Escape"){const a=t.selection.first();t.remove(a);t.pointNodes.iterator.each(function(i){t.remove(i)});t.dimensionLinks.iterator.each(function(i){t.remove(i)});t.pointNodes.clear();t.dimensionLinks.clear();this.doDeactivate()}super.doKeyDown()}doMouseMove(){if(this.wallReshapingTool===null)return;this.diagram.currentCursor="crosshair";this.wallReshapingTool.doMouseMove()}doDeactivate(){const i=this.diagram;this.buildingWall=null;this.diagram.currentCursor="";this.diagram.isMouseCaptured=false;if(this.wallReshapingTool!==null){this.wallReshapingTool.isEnabled=false;this.wallReshapingTool.adornedShape=null;this.wallReshapingTool.doMouseUp();this.wallReshapingTool.doDeactivate();this.wallReshapingTool.isBuilding=false}const t=i;t.updateWallDimensions();this.stopTransaction();this.isActive=false}}